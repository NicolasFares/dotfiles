"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCustomTags = getCustomTags;
const yaml_1 = require("yaml");
class CommonTagImpl {
    constructor(tag, type) {
        this.tag = tag;
        this.type = type;
    }
    resolve(value, onError) {
        if ((0, yaml_1.isMap)(value) && this.type === "mapping") {
            return value;
        }
        if ((0, yaml_1.isSeq)(value) && this.type === "sequence") {
            return value;
        }
        if (typeof value === "string" && this.type === "scalar") {
            return value;
        }
        onError(`Unexpected type for tag ${this.tag}: ${typeof value}, expected ${this.type}`);
    }
}
class IncludeTag {
    constructor() {
        this.tag = "!include";
        this.type = "scalar";
    }
    resolve(value, onError) {
        if (value && value.length > 0 && value.trim()) {
            return value;
        }
        onError("!include without value");
    }
}
function getCustomTags(customTags) {
    const tags = [];
    for (const [tagName, tagType] of Object.entries(customTags)) {
        tags.push(new CommonTagImpl(tagName, tagType));
    }
    tags.push(new IncludeTag());
    return tags;
}

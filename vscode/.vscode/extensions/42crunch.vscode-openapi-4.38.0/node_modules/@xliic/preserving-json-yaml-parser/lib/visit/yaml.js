"use strict";
/*
 Copyright (c) 42Crunch Ltd. All rights reserved.
 Licensed under the GNU Affero General Public License version 3. See LICENSE.txt in the project root for license information.
*/
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitYaml = visitYaml;
const yaml_1 = require("yaml");
function visitYaml(document, parent, key, node, visitor) {
    const location = getLocation(parent, key, node);
    if ((0, yaml_1.isMap)(node)) {
        visitor.onObjectStart(parent, key, node, location);
        for (const pair of node.items) {
            visitYaml(document, node, pair.key.value, pair.value, visitor);
        }
        visitor.onObjectEnd();
    }
    else if ((0, yaml_1.isSeq)(node)) {
        visitor.onArrayStart(parent, key, node, location);
        node.items.forEach((value, index) => {
            visitYaml(document, node, index, value, visitor);
        });
        visitor.onArrayEnd();
    }
    else if ((0, yaml_1.isScalar)(node)) {
        visitor.onValue(parent, key, node.value, node.source, location);
    }
    else if ((0, yaml_1.isAlias)(node)) {
        const resolved = node.resolve(document);
        if (resolved !== undefined) {
            visitYaml(document, parent, key, resolved, visitor);
        }
    }
}
function getLocation(parent, key, node) {
    return { key: getKeyRange(parent, key), value: { start: node.range[0], end: node.range[1] } };
}
function getKeyRange(parent, key) {
    if ((0, yaml_1.isMap)(parent)) {
        const pair = findPair(parent.items, key);
        if (pair !== undefined && pair.key.range) {
            return { start: pair.key.range[0], end: pair.key.range[1] };
        }
    }
}
function findPair(items, key) {
    const k = (0, yaml_1.isScalar)(key) ? key.value : key;
    for (const it of items) {
        if ((0, yaml_1.isPair)(it)) {
            if (it.key === key || it.key === k)
                return it;
            if ((0, yaml_1.isScalar)(it.key) && it.key.value === k)
                return it;
        }
    }
    return undefined;
}
